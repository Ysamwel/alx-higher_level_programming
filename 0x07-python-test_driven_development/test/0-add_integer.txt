0-add_integer module test cases
=================

0-add_integer has two integers/floats as the arg and it returns the sum of the two integers

Implementing ''0-add_integer''
====================

Importing the add_integer function from the module:
        >>> add_integer = __import__("0-add_integer").add_integer

Check the module docstring:
        >>> m = __import__("0-add_integer").__doc__
        >>> len(m) > 1
        True

Check the function docstring:
        >>> f = __import__("0-add_integer").add_integer.__doc__
        >>> len(f) > 1
        True
    
Check for regular addition:
        >>> add_integer(1, 3)
        4

Check positive and negative:
        >>> add_integer(4, -6)
        -2

Check for negative with positive:
        >>> add_integer(-3,5)
        2

Check addition over multiple values:
        >>> [add_integer(i, i ** 2) for i in range(6)]
        [0, 2, 6, 12, 20, 30]

Add float and int:
        >>> add_integer(2.1, 4)
        6

Add int with float:
        >>> add_integer(5, 7.8)
        12

Check double float:
        >>> add_integer(2.45, 3.1)
	5

Check for passed NaN:
        >>> add_integer(1, float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer

Check for passed info:
        >>> add_integer(1, float('info'))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Check extra long int:
        >>> add_integer(999999999999999999999999999999, 1)
	1000000000000000000000000000000

Check for non-number with number:
        >>> add_integer([1], 2)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Check number with non-number:
        >>> add_integer(3, "2")
        Traceback (most recent call last):
	...
	TypeError: b must be an integer

Check for non-number with non-number:
        >>> add_integer((2,), {"key": "value"})
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Check bool with number:
        >>> add_integer(True, 1)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Check number with bool:
        >>> add_integer(0, False)
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

Check no arguments:
        >>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

Check one argument:
        >>> add_integer(1)
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument:'b'

Check more than 2 arguments:
        >>> add_integer(1, 2, 3)
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes 2 positional arguments but 3 were given
